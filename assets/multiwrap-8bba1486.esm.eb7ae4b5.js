import{Q as u,C as w,_ as o,a as l,U as k,c as g,d as A,k as f,G as m,h as v,e as W,n as C,V as T,W as y,X as I,Y as E,Z as $,$ as h,T as R}from"./index.4a2c1a5c.js";class i extends u{constructor(a,r,n){let s=arguments.length>3&&arguments[3]!==void 0?arguments[3]:{},t=arguments.length>4?arguments[4]:void 0,e=arguments.length>5?arguments[5]:void 0,c=arguments.length>6&&arguments[6]!==void 0?arguments[6]:new w(a,r,t,s);super(c,n,e),o(this,"abi",void 0),o(this,"encoder",void 0),o(this,"estimator",void 0),o(this,"metadata",void 0),o(this,"app",void 0),o(this,"events",void 0),o(this,"roles",void 0),o(this,"royalties",void 0),o(this,"owner",void 0),this.abi=t,this.metadata=new l(this.contractWrapper,k,this.storage),this.app=new g(this.contractWrapper,this.metadata,this.storage),this.roles=new A(this.contractWrapper,i.contractRoles),this.encoder=new f(this.contractWrapper),this.estimator=new m(this.contractWrapper),this.events=new v(this.contractWrapper),this.royalties=new W(this.contractWrapper,this.metadata),this.owner=new C(this.contractWrapper)}async getWrappedContents(a){const r=await this.contractWrapper.readContract.getWrappedContents(a),n=[],s=[],t=[];for(const e of r)switch(e.tokenType){case 0:{const c=await T(this.contractWrapper.getProvider(),e.assetContract);n.push({contractAddress:e.assetContract,quantity:y(e.totalAmount,c.decimals)});break}case 1:{s.push({contractAddress:e.assetContract,tokenId:e.tokenId});break}case 2:{t.push({contractAddress:e.assetContract,tokenId:e.tokenId,quantity:e.totalAmount.toString()});break}}return{erc20Tokens:n,erc721Tokens:s,erc1155Tokens:t}}async wrap(a,r,n){const s=await I(r,this.storage),t=n||await this.contractWrapper.getSignerAddress(),e=await this.toTokenStructList(a),c=await this.contractWrapper.sendTransaction("wrap",[e,s,t]),d=this.contractWrapper.parseLogs("TokensWrapped",c==null?void 0:c.logs);if(d.length===0)throw new Error("TokensWrapped event not found");const p=d[0].args.tokenIdOfWrappedToken;return{id:p,receipt:c,data:()=>this.get(p)}}async unwrap(a,r){const n=r||await this.contractWrapper.getSignerAddress();return{receipt:await this.contractWrapper.sendTransaction("unwrap",[a,n])}}async toTokenStructList(a){const r=[],n=this.contractWrapper.getProvider(),s=await this.contractWrapper.getSignerAddress();if(a.erc20Tokens)for(const t of a.erc20Tokens){const e=await E(n,t.quantity,t.contractAddress);if(!await $(this.contractWrapper,t.contractAddress,e))throw new Error(`ERC20 token with contract address "${t.contractAddress}" does not have enough allowance to transfer.

You can set allowance to the multiwrap contract to transfer these tokens by running:

await sdk.getToken("${t.contractAddress}").setAllowance("${this.getAddress()}", ${t.quantity});

`);r.push({assetContract:t.contractAddress,totalAmount:e,tokenId:0,tokenType:0})}if(a.erc721Tokens)for(const t of a.erc721Tokens){if(!await h(this.contractWrapper.getProvider(),this.getAddress(),t.contractAddress,t.tokenId,s))throw new Error(`ERC721 token "${t.tokenId}" with contract address "${t.contractAddress}" is not approved for transfer.

You can give approval the multiwrap contract to transfer this token by running:

await sdk.getNFTCollection("${t.contractAddress}").setApprovalForToken("${this.getAddress()}", ${t.tokenId});

`);r.push({assetContract:t.contractAddress,totalAmount:0,tokenId:t.tokenId,tokenType:1})}if(a.erc1155Tokens)for(const t of a.erc1155Tokens){if(!await h(this.contractWrapper.getProvider(),this.getAddress(),t.contractAddress,t.tokenId,s))throw new Error(`ERC1155 token "${t.tokenId}" with contract address "${t.contractAddress}" is not approved for transfer.

You can give approval the multiwrap contract to transfer this token by running:

await sdk.getEdition("${t.contractAddress}").setApprovalForAll("${this.getAddress()}", true);

`);r.push({assetContract:t.contractAddress,totalAmount:t.quantity,tokenId:t.tokenId,tokenType:2})}return r}async prepare(a,r,n){return R.fromContractWrapper({contractWrapper:this.contractWrapper,method:a,args:r,overrides:n})}async call(a){for(var r=arguments.length,n=new Array(r>1?r-1:0),s=1;s<r;s++)n[s-1]=arguments[s];return this.contractWrapper.call(a,...n)}}o(i,"contractRoles",["admin","transfer","minter","unwrap","asset"]);export{i as Multiwrap};
