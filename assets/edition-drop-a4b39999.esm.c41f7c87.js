import{S as g,C,_ as t,b as o,a as w,D as W,c as v,d as f,e as y,f as T,g as E,h as A,i as R,k as b,G as k,l as P,m as S,E as D,P as F,n as O,o as I,A as x,T as G}from"./index.4a2c1a5c.js";class p extends g{constructor(r,a,n){var e;let u=arguments.length>3&&arguments[3]!==void 0?arguments[3]:{},d=arguments.length>4?arguments[4]:void 0,l=arguments.length>5?arguments[5]:void 0,m=arguments.length>6&&arguments[6]!==void 0?arguments[6]:new C(r,a,d,u);super(m,n,l),e=this,t(this,"abi",void 0),t(this,"sales",void 0),t(this,"platformFees",void 0),t(this,"encoder",void 0),t(this,"estimator",void 0),t(this,"events",void 0),t(this,"metadata",void 0),t(this,"app",void 0),t(this,"roles",void 0),t(this,"royalties",void 0),t(this,"claimConditions",void 0),t(this,"checkout",void 0),t(this,"history",void 0),t(this,"interceptor",void 0),t(this,"erc1155",void 0),t(this,"owner",void 0),t(this,"createBatch",o(async(s,i)=>this.erc1155.lazyMint.prepare(s,i))),t(this,"claimTo",o(async function(s,i,c){let h=arguments.length>3&&arguments[3]!==void 0?arguments[3]:!0;return e.erc1155.claimTo.prepare(s,i,c,{checkERC20Allowance:h})})),t(this,"claim",o(async function(s,i){let c=arguments.length>2&&arguments[2]!==void 0?arguments[2]:!0;const h=await e.contractWrapper.getSignerAddress();return e.claimTo.prepare(h,s,i,c)})),t(this,"burnTokens",o(async(s,i)=>this.erc1155.burn.prepare(s,i))),this.abi=d,this.metadata=new w(this.contractWrapper,W,this.storage),this.app=new v(this.contractWrapper,this.metadata,this.storage),this.roles=new f(this.contractWrapper,p.contractRoles),this.royalties=new y(this.contractWrapper,this.metadata),this.sales=new T(this.contractWrapper),this.claimConditions=new E(this.contractWrapper,this.metadata,this.storage),this.events=new A(this.contractWrapper),this.history=new R(this.events),this.encoder=new b(this.contractWrapper),this.estimator=new k(this.contractWrapper),this.platformFees=new P(this.contractWrapper),this.interceptor=new S(this.contractWrapper),this.erc1155=new D(this.contractWrapper,this.storage,l),this.checkout=new F(this.contractWrapper),this.owner=new O(this.contractWrapper)}onNetworkUpdated(r){this.contractWrapper.updateSignerOrProvider(r)}getAddress(){return this.contractWrapper.readContract.address}async getAll(r){return this.erc1155.getAll(r)}async getOwned(r){return this.erc1155.getOwned(r)}async getTotalCount(){return this.erc1155.totalCount()}async isTransferRestricted(){return!await this.contractWrapper.readContract.hasRole(I("transfer"),x)}async getClaimTransaction(r,a,n){let e=arguments.length>3&&arguments[3]!==void 0?arguments[3]:!0;return this.erc1155.getClaimTransaction(r,a,n,{checkERC20Allowance:e})}async prepare(r,a,n){return G.fromContractWrapper({contractWrapper:this.contractWrapper,method:r,args:a,overrides:n})}async call(r){for(var a=arguments.length,n=new Array(a>1?a-1:0),e=1;e<a;e++)n[e-1]=arguments[e];return this.contractWrapper.call(r,...n)}}t(p,"contractRoles",["admin","minter","transfer"]);export{p as EditionDrop};
