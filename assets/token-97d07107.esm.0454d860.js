import{am as u,C as m,_ as t,b as i,a as l,ao as W,c as f,d as w,f as C,h as y,ap as v,k as T,G as b,l as R,m as E,aq as A,o as F,A as S,T as h}from"./index.4a2c1a5c.js";class c extends u{constructor(r,e,n){let s=arguments.length>3&&arguments[3]!==void 0?arguments[3]:{},p=arguments.length>4?arguments[4]:void 0,d=arguments.length>5?arguments[5]:void 0,g=arguments.length>6&&arguments[6]!==void 0?arguments[6]:new m(r,e,p,s);super(g,n,d),t(this,"abi",void 0),t(this,"metadata",void 0),t(this,"app",void 0),t(this,"roles",void 0),t(this,"encoder",void 0),t(this,"estimator",void 0),t(this,"history",void 0),t(this,"events",void 0),t(this,"platformFees",void 0),t(this,"sales",void 0),t(this,"signature",void 0),t(this,"interceptor",void 0),t(this,"mint",i(async a=>this.erc20.mint.prepare(a))),t(this,"mintTo",i(async(a,o)=>this.erc20.mintTo.prepare(a,o))),t(this,"mintBatchTo",i(async a=>this.erc20.mintBatchTo.prepare(a))),t(this,"delegateTo",i(async a=>h.fromContractWrapper({contractWrapper:this.contractWrapper,method:"delegate",args:[a]}))),t(this,"burn",i(a=>this.erc20.burn.prepare(a))),t(this,"burnFrom",i(async(a,o)=>this.erc20.burnFrom.prepare(a,o))),this.abi=p,this.metadata=new l(this.contractWrapper,W,this.storage),this.app=new f(this.contractWrapper,this.metadata,this.storage),this.roles=new w(this.contractWrapper,c.contractRoles),this.sales=new C(this.contractWrapper),this.events=new y(this.contractWrapper),this.history=new v(this.contractWrapper,this.events),this.encoder=new T(this.contractWrapper),this.estimator=new b(this.contractWrapper),this.platformFees=new R(this.contractWrapper),this.interceptor=new E(this.contractWrapper),this.signature=new A(this.contractWrapper,this.roles)}async getVoteBalance(){return await this.getVoteBalanceOf(await this.contractWrapper.getSignerAddress())}async getVoteBalanceOf(r){return await this.erc20.getValue(await this.contractWrapper.readContract.getVotes(r))}async getDelegation(){return await this.getDelegationOf(await this.contractWrapper.getSignerAddress())}async getDelegationOf(r){return await this.contractWrapper.readContract.delegates(r)}async isTransferRestricted(){return!await this.contractWrapper.readContract.hasRole(F("transfer"),S)}async getMintTransaction(r,e){return this.erc20.getMintTransaction(r,e)}async prepare(r,e,n){return h.fromContractWrapper({contractWrapper:this.contractWrapper,method:r,args:e,overrides:n})}async call(r){for(var e=arguments.length,n=new Array(e>1?e-1:0),s=1;s<e;s++)n[s-1]=arguments[s];return this.contractWrapper.call(r,...n)}}t(c,"contractRoles",["admin","minter","transfer"]);export{c as Token};
