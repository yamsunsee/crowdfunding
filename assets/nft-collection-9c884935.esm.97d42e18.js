import{Q as m,C as u,_ as t,b as i,a as l,a0 as g,c as W,d as w,e as v,f as C,k as f,G as y,h as T,l as b,m as R,a1 as E,a2 as A,n as S,o as B,A as F,T as M}from"./index.4a2c1a5c.js";class c extends m{constructor(r,a,n){let s=arguments.length>3&&arguments[3]!==void 0?arguments[3]:{},h=arguments.length>4?arguments[4]:void 0,p=arguments.length>5?arguments[5]:void 0,d=arguments.length>6&&arguments[6]!==void 0?arguments[6]:new u(r,a,h,s);super(d,n,p),t(this,"abi",void 0),t(this,"metadata",void 0),t(this,"app",void 0),t(this,"roles",void 0),t(this,"encoder",void 0),t(this,"estimator",void 0),t(this,"events",void 0),t(this,"sales",void 0),t(this,"platformFees",void 0),t(this,"royalties",void 0),t(this,"owner",void 0),t(this,"signature",void 0),t(this,"interceptor",void 0),t(this,"erc721",void 0),t(this,"mint",i(async e=>this.erc721.mint.prepare(e))),t(this,"mintTo",i(async(e,o)=>this.erc721.mintTo.prepare(e,o))),t(this,"mintBatch",i(async e=>this.erc721.mintBatch.prepare(e))),t(this,"mintBatchTo",i(async(e,o)=>this.erc721.mintBatchTo.prepare(e,o))),t(this,"burn",i(e=>this.erc721.burn.prepare(e))),this.abi=h,this.metadata=new l(this.contractWrapper,g,this.storage),this.app=new W(this.contractWrapper,this.metadata,this.storage),this.roles=new w(this.contractWrapper,c.contractRoles),this.royalties=new v(this.contractWrapper,this.metadata),this.sales=new C(this.contractWrapper),this.encoder=new f(this.contractWrapper),this.estimator=new y(this.contractWrapper),this.events=new T(this.contractWrapper),this.platformFees=new b(this.contractWrapper),this.interceptor=new R(this.contractWrapper),this.erc721=new E(this.contractWrapper,this.storage,p),this.signature=new A(this.contractWrapper,this.storage),this.owner=new S(this.contractWrapper)}onNetworkUpdated(r){this.contractWrapper.updateSignerOrProvider(r)}getAddress(){return this.contractWrapper.readContract.address}async isTransferRestricted(){return!await this.contractWrapper.readContract.hasRole(B("transfer"),F)}async getMintTransaction(r,a){return this.erc721.getMintTransaction(r,a)}async prepare(r,a,n){return M.fromContractWrapper({contractWrapper:this.contractWrapper,method:r,args:a,overrides:n})}async call(r){for(var a=arguments.length,n=new Array(a>1?a-1:0),s=1;s<a;s++)n[s-1]=arguments[s];return this.contractWrapper.call(r,...n)}}t(c,"contractRoles",["admin","minter","transfer"]);export{c as NFTCollection};
